//@version=6
indicator("Trading Entry Checklist", shorttitle = "Entry Checklist", overlay = true)

// === Table with 3 columns and 7 rows ===
var table checklistTable = table.new(position.bottom_right, 3, 7, bgcolor=color.rgb(54, 58, 69, 70), frame_width=1, frame_color=color.gray)

// === Earnings Date Check ===
// Note: earnings.future_time is not available in Pine Script v6
// This is a placeholder - you may need to manually input earnings dates
// or use a different data source
earningsTime = earnings.future_time
todayUTC = timestamp(year(timenow), month(timenow), dayofmonth(timenow), 0, 0)
earningsUTC = na(earningsTime) ? na : timestamp(year(earningsTime), month(earningsTime), dayofmonth(earningsTime), 0, 0)
daysUntilEarnings = na(earningsUTC) ? na : (earningsUTC - todayUTC) / 86400000
isEarningsSoon = not na(earningsTime) and not na(daysUntilEarnings) and daysUntilEarnings >= 0 and daysUntilEarnings <= 14

earningsDateStr = na(earningsTime) ? "N/A" : str.tostring(year(earningsTime)) + "-" + str.tostring(month(earningsTime)) + "-" + str.tostring(dayofmonth(earningsTime)) + " " + str.tostring(hour(earningsTime), "#00") + ":" + str.tostring(minute(earningsTime), "#00")

// === Weak Month Check ===
currentMonth = month(timenow)
isWeakMonth = currentMonth == 5 or currentMonth == 8 or currentMonth == 9
monthStr = str.tostring(currentMonth) + " (" + (currentMonth == 5 ? "May" : currentMonth == 8 ? "Aug" : currentMonth == 9 ? "Sep" : "Other") + ")"

// === RS Rating vs SPX ===
spx = request.security("SP:SPX", "D", close)
closeDa = request.security(syminfo.tickerid, "D", close)
n63  = math.min(bar_index, 63)
n126 = math.min(bar_index, 126)
n189 = math.min(bar_index, 189)
n252 = math.min(bar_index, 252)

perfStock = 0.4 * (closeDa / closeDa[n63]) + 0.2 * (closeDa / closeDa[n126]) + 0.2 * (closeDa / closeDa[n189]) + 0.2 * (closeDa / closeDa[n252])
perfSPX   = 0.4 * (spx / spx[n63]) + 0.2 * (spx / spx[n126]) + 0.2 * (spx / spx[n189]) + 0.2 * (spx / spx[n252])
rsScore   = perfStock / perfSPX * 100

rsRating = rsScore >= 120 ? 99 :
           rsScore >= 110 ? 90 :
           rsScore >= 100 ? 80 :
           rsScore >= 95  ? 70 :
           rsScore >= 90  ? 60 :
           rsScore >= 85  ? 50 :
           rsScore >= 75  ? 40 :
           rsScore >= 65  ? 30 :
           rsScore >= 55  ? 20 :
           rsScore >= 45  ? 10 : 1

isRSWeak = rsRating < 65
isRSStrong = rsRating >= 80

// === Greed/Fear Index (example: INDEX:FEARGREED or placeholder) ===
vix = request.security("CBOE:VIX", "D", close)
vixStr = na(vix) ? "N/A" : str.tostring(vix, "#.##")
isGreed = vix <= 15
isFear  = vix >= 25

// === Sales and EPS Growth Check ===
// Using request.financial() to get fundamental data
salesTTM = request.financial(syminfo.tickerid, "TOTAL_REVENUE", "TTM")
salesTTM_1Y = request.financial(syminfo.tickerid, "TOTAL_REVENUE", "TTM", ignore_invalid_symbol=true)[252]
epsTTM = request.financial(syminfo.tickerid, "EARNINGS_PER_SHARE", "TTM")
epsTTM_1Y = request.financial(syminfo.tickerid, "EARNINGS_PER_SHARE", "TTM", ignore_invalid_symbol=true)[252]

// Calculate year-over-year growth
salesGrowth = not na(salesTTM) and not na(salesTTM_1Y) and salesTTM_1Y != 0 ? (salesTTM / salesTTM_1Y - 1) : na
epsGrowth = not na(epsTTM) and not na(epsTTM_1Y) and epsTTM_1Y != 0 ? (epsTTM / epsTTM_1Y - 1) : na

isSalesGrowing = not na(salesGrowth) and salesGrowth > 0
isEpsGrowing = not na(epsGrowth) and epsGrowth > 0
isBothGrowing = isSalesGrowing and isEpsGrowing

salesEpsStr = na(salesGrowth) or na(epsGrowth) ? "N/A" : 
              "S:" + str.tostring(salesGrowth * 100, "#.#") + "% E:" + str.tostring(epsGrowth * 100, "#.#") + "%"

// === Sector Strength Check ===
// Get sector performance - using major sector ETFs as proxies
// Updated with comprehensive TradingView sector names and specific industry ETFs
sectorETF = switch
    syminfo.sector == "Technology Services" => "XLK"
    syminfo.sector == "Electronic Technology" => "XLK"
    syminfo.sector == "Finance" => "XLF"
    syminfo.sector == "Health Technology" => "XLV"
    syminfo.sector == "Health Services" => "XLV"
    syminfo.sector == "Retail Trade" => "XLY"
    syminfo.sector == "Consumer Non-Durables" => "XLP"
    syminfo.sector == "Consumer Durables" => "XLY"
    syminfo.sector == "Consumer Services" => "XLY"
    syminfo.sector == "Producer Manufacturing" => "XLI"
    syminfo.sector == "Energy Minerals" => "XLE"
    syminfo.sector == "Utilities" => "XLU"
    syminfo.sector == "Communications" => "XLC"
    syminfo.sector == "Process Industries" => "XLB"
    syminfo.sector == "Transportation" => "XLI"
    syminfo.sector == "Non-Energy Minerals" => "PICK"  // More specific for metals/minerals
    syminfo.sector == "Industrial Services" => "XLI"
    syminfo.sector == "Commercial Services" => "XLI"
    syminfo.sector == "Distribution Services" => "XLI"
    syminfo.sector == "Miscellaneous" => "SPY"
    => "SPY"  // Default to SPY if sector unknown

// Additional industry-specific ETF mapping for more granular analysis
industryETF = switch
    str.contains(str.lower(syminfo.industry), "precious metals") or str.contains(str.lower(syminfo.industry), "gold") or str.contains(str.lower(syminfo.industry), "silver") => "GOAU"
    str.contains(str.lower(syminfo.industry), "steel") => "SLX"
    str.contains(str.lower(syminfo.industry), "construction materials") or str.contains(str.lower(syminfo.industry), "building materials") => "XHB"
    str.contains(str.lower(syminfo.industry), "forest products") or str.contains(str.lower(syminfo.industry), "lumber") or str.contains(str.lower(syminfo.industry), "wood") => "WOOD"
    str.contains(str.lower(syminfo.industry), "aluminum") or str.contains(str.lower(syminfo.industry), "other metals") => "PICK"
    str.contains(str.lower(syminfo.industry), "semiconductor") => "SMH"
    str.contains(str.lower(syminfo.industry), "telecommunications equipment") or str.contains(str.lower(syminfo.industry), "telecom equipment") => "XTL"
    str.contains(str.lower(syminfo.industry), "aerospace") or str.contains(str.lower(syminfo.industry), "defense") => "ITA"
    str.contains(str.lower(syminfo.industry), "hardware") or str.contains(str.lower(syminfo.industry), "peripherals") or str.contains(str.lower(syminfo.industry), "electronic components") or str.contains(str.lower(syminfo.industry), "electronic equipment") => "XLK"
    str.contains(str.lower(syminfo.industry), "household") or str.contains(str.lower(syminfo.industry), "personal care") or str.contains(str.lower(syminfo.industry), "beverages") or str.contains(str.lower(syminfo.industry), "tobacco") => "XLP"
    str.contains(str.lower(syminfo.industry), "apparel") or str.contains(str.lower(syminfo.industry), "footwear") => "XRT"
    str.contains(str.lower(syminfo.industry), "food") or str.contains(str.lower(syminfo.industry), "meat") or str.contains(str.lower(syminfo.industry), "dairy") => "PBJ"
    => sectorETF  // Fall back to sector ETF if no specific industry ETF found

// Use industry-specific ETF if available, otherwise use sector ETF
finalETF = industryETF

// Get sector ETF performance vs SPY (always use sector ETF for sector comparison)
sectorClose = request.security(sectorETF, "D", close)
spyClose = request.security("SPY", "D", close)

// Calculate sector relative strength vs market (20-day performance)
n20 = math.min(bar_index, 20)
sectorPerf20 = sectorClose / sectorClose[n20] - 1
spyPerf20 = spyClose / spyClose[n20] - 1
sectorRelativePerf = sectorPerf20 - spyPerf20

isSectorStrong = sectorRelativePerf > 0.02  // Sector outperforming by more than 2%
isSectorWeak = sectorRelativePerf < -0.02   // Sector underperforming by more than 2%

sectorStr = na(sectorRelativePerf) ? "N/A" : (na(syminfo.sector) ? "Unknown" : syminfo.sector) + " (" + sectorETF + "): " + str.tostring(sectorRelativePerf * 100, "#.#") + "% vs SPY"

// === Industry Strength Check ===
// Get industry-specific ETF performance vs SPY (use finalETF for more specific industry analysis)
industryClose = request.security(finalETF, "D", close)
industryPerf20 = industryClose / industryClose[n20] - 1
industryRelativePerf = industryPerf20 - spyPerf20

isIndustryStrong = industryRelativePerf > 0.02  // Industry outperforming by more than 2%
isIndustryWeak = industryRelativePerf < -0.02   // Industry underperforming by more than 2%

industryStr = na(industryRelativePerf) ? "N/A" : 
              (na(syminfo.industry) ? "Unknown" : syminfo.industry) + " (" + finalETF + "): " + str.tostring(industryRelativePerf * 100, "#.#") + "% vs SPY"

// === Row 0: Earnings Period ===
table.cell(checklistTable, 0, 0, "Is earning period?", text_color=color.white)
table.cell(checklistTable, 1, 0, earningsDateStr, text_color=isEarningsSoon ? color.red : color.white)
table.cell(checklistTable, 2, 0, isEarningsSoon ? "❌" : "", text_color=color.red)

// === Row 1: Weak Month ===
table.cell(checklistTable, 0, 1, "Is weak month?", text_color=color.white)
table.cell(checklistTable, 1, 1, monthStr, text_color=isWeakMonth ? color.red : color.white)
table.cell(checklistTable, 2, 1, isWeakMonth ? "❌" : "", text_color=color.red)

// === Row 2: Greed/Fear (using VIX) ===
table.cell(checklistTable, 0, 2, "Greed/Fear (VIX)", text_color=color.white)
table.cell(checklistTable, 1, 2, vixStr, text_color=isFear ? color.red : isGreed ? color.green : color.white)
table.cell(checklistTable, 2, 2, isFear ? "❌" : isGreed ? "✅" : "", text_color=isFear ? color.red : isGreed ? color.green : color.white)

// === Row 3: Sector Strength ===
table.cell(checklistTable, 0, 3, "Sector Strength", text_color=color.white)
table.cell(checklistTable, 1, 3, sectorStr, text_color=isSectorWeak ? color.red : isSectorStrong ? color.green : color.white)
table.cell(checklistTable, 2, 3, isSectorWeak ? "❌" : isSectorStrong ? "✅" : "", text_color=isSectorWeak ? color.red : isSectorStrong ? color.green : color.white)

// === Row 4: Industry Strength ===
// Only show industry strength if it uses a different ETF than the sector
if (finalETF != sectorETF)
    table.cell(checklistTable, 0, 4, "Industry Strength", text_color=color.white)
    table.cell(checklistTable, 1, 4, industryStr, text_color=isIndustryWeak ? color.red : isIndustryStrong ? color.green : color.white)
    table.cell(checklistTable, 2, 4, isIndustryWeak ? "❌" : isIndustryStrong ? "✅" : "", text_color=isIndustryWeak ? color.red : isIndustryStrong ? color.green : color.white)

// === Row 5: RS Rating ===
table.cell(checklistTable, 0, 5, "RS Rating", text_color=color.white)
table.cell(checklistTable, 1, 5, str.tostring(rsRating, "#.##"), text_color=isRSWeak ? color.red : isRSStrong ? color.green : color.white)
table.cell(checklistTable, 2, 5, isRSWeak ? "❌" : isRSStrong ? "✅" : "", text_color=isRSWeak ? color.red : isRSStrong ? color.green : color.white)

// === Row 6: Sales & EPS Growth ===
table.cell(checklistTable, 0, 6, "Sales & EPS Growth", text_color=color.white)
table.cell(checklistTable, 1, 6, salesEpsStr, text_color=isBothGrowing ? color.green : color.white)
table.cell(checklistTable, 2, 6, isBothGrowing ? "✅" : "❌", text_color=isBothGrowing ? color.green : color.red)
